/* automatically generated by rust-bindgen */

#![allow(dead_code)]
extern crate libc;
extern crate std;
use self::libc::{c_int, c_double, c_char, c_uint};
use common;

#[allow(non_camel_case_types)]
pub type Struct_svm_node = common::Struct_feature_node;

#[repr(C)]
// #[derive(Copy, Debug)]
// #[allow(raw_pointer_derive)]
pub struct Struct_svm_problem {
    pub l: c_int,
    pub y: *const c_double,
    pub x: *const *const Struct_svm_node,
}
// impl ::std::clone::Clone for Struct_svm_problem {
//     fn clone(&self) -> Self { *self }
// }
// impl ::std::default::Default for Struct_svm_problem {
//     fn default() -> Self { unsafe { ::std::mem::zeroed() } }
// }
// pub type Enum_Unnamed1 = c_uint;
pub const C_SVC: c_int = 0;
pub const NU_SVC: c_int = 1;
pub const ONE_CLASS: c_int = 2;
pub const EPSILON_SVR: c_int = 3;
pub const NU_SVR: c_uint = 4;
// pub type Enum_Unnamed2 = c_uint;
pub const LINEAR: c_int = 0;
pub const POLY: c_int = 1;
pub const RBF: c_int = 2;
pub const SIGMOID: c_int = 3;
pub const PRECOMPUTED: c_int = 4;
#[repr(C)]
#[derive(Copy, Debug)]
#[allow(non_snake_case)]
pub struct Struct_svm_parameter {
    pub svm_type: c_int,
    pub kernel_type: c_int,
    pub degree: c_int,
    pub gamma: c_double,
    pub coef0: c_double,
    pub cache_size: c_double,
    pub eps: c_double,
    pub C: c_double,
    pub nr_weight: c_int,
    pub weight_label: *const c_int,
    pub weight: *const c_double,
    pub nu: c_double,
    pub p: c_double,
    pub shrinking: c_int,
    pub probability: c_int,
}
impl ::std::clone::Clone for Struct_svm_parameter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_svm_parameter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
// #[derive(Copy, Debug)]
// #[derive(Debug)]
#[allow(non_snake_case)]
pub struct Struct_svm_model {
    pub param: Struct_svm_parameter,
    pub nr_class: c_int,
    pub l: c_int,
    pub SV: *const *const Struct_svm_node,
    pub sv_coef: *const *const c_double,
    pub rho: *const c_double,
    pub probA: *const c_double,
    pub probB: *const c_double,
    pub sv_indices: *const c_int,
    pub label: *const c_int,
    pub nSV: *const c_int,
    pub free_sv: c_int,
}
// impl ::std::clone::Clone for Struct_svm_model {
//     fn clone(&self) -> Self { *self }
// }
impl ::std::default::Default for Struct_svm_model {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "svm")]
extern "C" {
    pub static mut libsvm_version: c_int;
}
#[link(name = "svm")]
extern "C" {
    pub fn svm_train(prob: *const Struct_svm_problem,
                     param: *const Struct_svm_parameter)
     -> *const Struct_svm_model;
    pub fn svm_cross_validation(prob: *const Struct_svm_problem,
                                param: *const Struct_svm_parameter,
                                nr_fold: c_int,
                                target: *const c_double) -> ();
    pub fn svm_save_model(model_file_name: *const c_char,
                          model: *const Struct_svm_model) -> c_int;
    pub fn svm_load_model(model_file_name: *const c_char)
     -> *const Struct_svm_model;
    pub fn svm_get_svm_type(model: *const Struct_svm_model) -> c_int;
    pub fn svm_get_nr_class(model: *const Struct_svm_model) -> c_int;
    pub fn svm_get_labels(model: *const Struct_svm_model,
                          label: *const c_int) -> ();
    pub fn svm_get_sv_indices(model: *const Struct_svm_model,
                              sv_indices: *const c_int) -> ();
    pub fn svm_get_nr_sv(model: *const Struct_svm_model) -> c_int;
    pub fn svm_get_svr_probability(model: *const Struct_svm_model)
     -> c_double;
    pub fn svm_predict_values(model: *const Struct_svm_model,
                              x: *const Struct_svm_node,
                              dec_values: *const c_double)
     -> c_double;
    pub fn svm_predict(model: *const Struct_svm_model,
                       x: *const Struct_svm_node) -> c_double;
    pub fn svm_predict_probability(model: *const Struct_svm_model,
                                   x: *const Struct_svm_node,
                                   prob_estimates: *const c_double)
     -> c_double;
    pub fn svm_free_model_content(model_ptr: *mut Struct_svm_model) -> ();
    pub fn svm_free_and_destroy_model(model_ptr_ptr:
                                          *mut *mut Struct_svm_model) -> ();
    pub fn svm_destroy_param(param: *mut Struct_svm_parameter) -> ();
    pub fn svm_check_parameter(prob: *const Struct_svm_problem,
                               param: *const Struct_svm_parameter)
     -> *const c_char;
    pub fn svm_check_probability_model(model: *const Struct_svm_model)
     -> c_int;
}
